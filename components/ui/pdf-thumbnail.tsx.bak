'use client';

import { useEffect, useRef, useState } from 'react';
import * as pdfjsLib from 'pdfjs-dist';
import { Loader2, FileText } from 'lucide-react';

// Set the PDF.js worker source
// In a real application, you should host this file yourself or use a CDN
// For development, we'll use the CDN version
pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;

interface PdfThumbnailProps {
  url: string;
  width?: number;
  height?: number;
  className?: string;
}

export function PdfThumbnail({ 
  url, 
  width = 200, 
  height = 250, 
  className = '' 
}: PdfThumbnailProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const renderThumbnail = async () => {
      if (!canvasRef.current) return;
      
      try {
        setLoading(true);
        setError(null);
        
        // Load the PDF document
        const loadingTask = pdfjsLib.getDocument(url);
        const pdf = await loadingTask.promise;
        
        // Get the first page
        const page = await pdf.getPage(1);
        
        // Get the canvas element
        const canvas = canvasRef.current;
        const context = canvas.getContext('2d');
        
        if (!context) {
          throw new Error('Unable to get canvas context');
        }
        
        // Determine the scale to fit within our container
        const viewport = page.getViewport({ scale: 1 });
        
        // Calculate scale to fit the thumbnail dimensions while maintaining aspect ratio
        const scaleX = width / viewport.width;
        const scaleY = height / viewport.height;
        const scale = Math.min(scaleX, scaleY);
        
        const scaledViewport = page.getViewport({ scale });
        
        // Set canvas dimensions
        canvas.height = scaledViewport.height;
        canvas.width = scaledViewport.width;
        
        // Render the PDF page to the canvas
        const renderContext = {
          canvasContext: context,
          viewport: scaledViewport,
        };
        
        await page.render(renderContext).promise;
        setLoading(false);
      } catch (err) {
        console.error('Error rendering PDF thumbnail:', err);
        setError(err instanceof Error ? err : new Error('Failed to render PDF'));
        setLoading(false);
      }
    };

    renderThumbnail();
  }, [url, width, height]);

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-full w-full bg-muted/20 rounded">
        <FileText className="h-10 w-10 text-muted-foreground" />
        <p className="text-xs text-muted-foreground mt-2">Failed to load PDF</p>
      </div>
    );
  }

  return (
    <div className={`relative ${className}`} style={{ width, height }}>
      {loading && (
        <div className="absolute inset-0 flex justify-center items-center bg-muted/20 rounded">
          <Loader2 className="h-6 w-6 animate-spin text-primary" />
        </div>
      )}
      <canvas 
        ref={canvasRef} 
        className={`rounded object-contain max-w-full max-h-full ${loading ? 'opacity-0' : 'opacity-100'} transition-opacity`}
      />
    </div>
  );
} 